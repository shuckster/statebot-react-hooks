{"version":3,"file":"statebot-react-hooks.dev.js","sources":["../../src/index.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react'\nimport { Statebot } from 'statebot'\n\n//\n// Use an existing Statebot\n//\nexport function useStatebot(bot) {\n  const [state, setState] = useState(bot.currentState())\n  useEffect(() => bot.onSwitched(setState), [bot])\n  return state\n}\n\n//\n// Create a new Statebot within a Component\n//\nexport function useStatebotFactory(name, config) {\n  const _config = useMemo(() => config, [name])\n  const listeners = []\n  useEffect(() => () => listeners.forEach(off => off()), [_config])\n\n  // We memoise Statebot since it's based on EventEmitter,\n  // so we create it once and add/remove listeners for\n  // the life-cycle of the component\n  const bot = useMemo(() => {\n    const { performTransitions, onTransitions, ...botConfig } = _config || {}\n    const bot = Statebot(name, botConfig)\n    listeners.push(\n      bot.performTransitions(performTransitions || {}),\n      bot.onTransitions(onTransitions || {})\n    )\n    return bot\n  }, [name, _config])\n\n  const state = useStatebot(bot)\n\n  return { state, bot }\n}\n\n//\n// Listen to Statebot events with automatic cleanup\n//\nexport function useStatebotEvent(bot, eventName, ...args) {\n  const listeners = []\n  useEffect(() => () => listeners.forEach(off => off()), [bot, eventName])\n  useEffect(() => {\n    if (\n      [\n        'onSwitching',\n        'onSwitched',\n        'onEntering',\n        'onEntered',\n        'onExiting',\n        'onExited'\n      ].includes(eventName)\n    ) {\n      listeners.push(bot[eventName](...args))\n    } else {\n      throw new Error(`Unknown event: ${eventName}`)\n    }\n  }, [bot, eventName])\n}\n"],"names":["useStatebot","bot","useState","currentState","state","setState","useEffect","onSwitched","useStatebotFactory","name","config","_config","useMemo","listeners","forEach","off","performTransitions","onTransitions","botConfig","Statebot","push","useStatebotEvent","eventName","args","includes","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAMO,SAASA,WAAT,CAAqBC,GAArB,EAA0B;EAAA,kBACLC,cAAQ,CAACD,GAAG,CAACE,YAAJ,EAAD,CADH;EAAA;EAAA,MACxBC,KADwB;EAAA,MACjBC,QADiB;;EAE/BC,EAAAA,eAAS,CAAC;EAAA,WAAML,GAAG,CAACM,UAAJ,CAAeF,QAAf,CAAN;EAAA,GAAD,EAAiC,CAACJ,GAAD,CAAjC,CAAT;EACA,SAAOG,KAAP;EACD;EAKM,SAASI,kBAAT,CAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;EAC/C,MAAMC,OAAO,GAAGC,aAAO,CAAC;EAAA,WAAMF,MAAN;EAAA,GAAD,EAAe,CAACD,IAAD,CAAf,CAAvB;;EACA,MAAMI,SAAS,GAAG,EAAlB;EACAP,EAAAA,eAAS,CAAC;EAAA,WAAM;EAAA,aAAMO,SAAS,CAACC,OAAV,CAAkB,UAAAC,GAAG;EAAA,eAAIA,GAAG,EAAP;EAAA,OAArB,CAAN;EAAA,KAAN;EAAA,GAAD,EAA8C,CAACJ,OAAD,CAA9C,CAAT;EAKA,MAAMV,GAAG,GAAGW,aAAO,CAAC,YAAM;EAAA,eACoCD,OAAO,IAAI,EAD/C;EAAA,QAChBK,kBADgB,QAChBA,kBADgB;EAAA,QACIC,aADJ,QACIA,aADJ;EAAA,QACsBC,SADtB;;EAExB,QAAMjB,GAAG,GAAGkB,iBAAQ,CAACV,IAAD,EAAOS,SAAP,CAApB;EACAL,IAAAA,SAAS,CAACO,IAAV,CACEnB,GAAG,CAACe,kBAAJ,CAAuBA,kBAAkB,IAAI,EAA7C,CADF,EAEEf,GAAG,CAACgB,aAAJ,CAAkBA,aAAa,IAAI,EAAnC,CAFF;EAIA,WAAOhB,GAAP;EACD,GARkB,EAQhB,CAACQ,IAAD,EAAOE,OAAP,CARgB,CAAnB;EAUA,MAAMP,KAAK,GAAGJ,WAAW,CAACC,GAAD,CAAzB;EAEA,SAAO;EAAEG,IAAAA,KAAK,EAALA,KAAF;EAASH,IAAAA,GAAG,EAAHA;EAAT,GAAP;EACD;EAKM,SAASoB,gBAAT,CAA0BpB,GAA1B,EAA+BqB,SAA/B,EAAmD;EAAA,oCAANC,IAAM;EAANA,IAAAA,IAAM;EAAA;;EACxD,MAAMV,SAAS,GAAG,EAAlB;EACAP,EAAAA,eAAS,CAAC;EAAA,WAAM;EAAA,aAAMO,SAAS,CAACC,OAAV,CAAkB,UAAAC,GAAG;EAAA,eAAIA,GAAG,EAAP;EAAA,OAArB,CAAN;EAAA,KAAN;EAAA,GAAD,EAA8C,CAACd,GAAD,EAAMqB,SAAN,CAA9C,CAAT;EACAhB,EAAAA,eAAS,CAAC,YAAM;EACd,QACE,CACE,aADF,EAEE,YAFF,EAGE,YAHF,EAIE,WAJF,EAKE,WALF,EAME,UANF,EAOEkB,QAPF,CAOWF,SAPX,CADF,EASE;EACAT,MAAAA,SAAS,CAACO,IAAV,CAAenB,GAAG,CAACqB,SAAD,CAAH,OAAArB,GAAG,EAAesB,IAAf,CAAlB;EACD,KAXD,MAWO;EACL,YAAM,IAAIE,KAAJ,0BAA4BH,SAA5B,EAAN;EACD;EACF,GAfQ,EAeN,CAACrB,GAAD,EAAMqB,SAAN,CAfM,CAAT;EAgBD;;;;;;;;;;;;"}